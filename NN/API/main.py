# import local modules
import dictionary as dict
import preprocessing
import beat_algorithm
# import foreign modules
import flask
import time
import math

start_time = time.time()
app = flask.Flask(__name__)


# Main program.
def main():
    # define youtube id
    id = "hPOYc4a2RPY"
    # preprocess audio file
    preprocessing.downloadAudio(id)
    preprocessing.splitAudio(id, mode=dict.STEMS2, output=dict.ACCOMPANIMENT)
    preprocessing.resampleAudio(id)
    # analyze song
    #_, aubioBeats = beat_algorithm.aubioBeatAnalysis(id)
    _, librosaBeats = beat_algorithm.librosaBeatAnalysis(id)
    manual = [
            3.1,
            3.9000000000000004,
            4.7,
            5.5,
            6.3,
            7.1,
            7.8999999999999995,
            8.7,
            9.5,
            10.3,
            11.100000000000001,
            11.900000000000002,
            12.700000000000003,
            13.500000000000004,
            14.300000000000004,
            15.100000000000005,
            15.900000000000006,
            16.700000000000006,
            17.489473684210534,
            18.27894736842106,
            19.06842105263159,
            19.857894736842116,
            20.647368421052644,
            21.43684210526317,
            22.2263157894737,
            23.015789473684226,
            23.805263157894753,
            24.59473684210528,
            25.384210526315808,
            26.173684210526336,
            26.963157894736863,
            27.75263157894739,
            28.542105263157918,
            29.331578947368445,
            30.121052631578973,
            30.9105263157895,
            31.700000000000028,
            32.48947368421055,
            33.27894736842108,
            34.06842105263161,
            34.857894736842134,
            35.64736842105266,
            36.41659919028343,
            37.185829959514194,
            37.95506072874496,
            38.72429149797573,
            39.493522267206494,
            40.26275303643726,
            41.03198380566803,
            41.80121457489879,
            42.57044534412956,
            43.339676113360326,
            44.10890688259109,
            44.87813765182186,
            45.647368421052626,
            46.41659919028339,
            47.18582995951416,
            47.955060728744925,
            48.72429149797569,
            49.49352226720646,
            50.262753036437225,
            51.03198380566799,
            51.80121457489876,
            52.570445344129524,
            53.33967611336029,
            54.10890688259106,
            54.85890688259106,
            55.60890688259106,
            56.35890688259106,
            57.10890688259106,
            57.85890688259106,
            58.60890688259106,
            59.35890688259106,
            60.10890688259106,
            60.8496476233318,
            61.59038836407254,
            62.33112910481328,
            63.07186984555402,
            63.81261058629476,
            64.5533513270355,
            65.29409206777625,
            66.034832808517,
            66.76654012559017,
            67.49824744266334,
            68.22995475973651,
            68.96166207680969,
            69.69336939388286,
            70.42507671095603,
            71.15678402802921,
            71.88849134510238,
            72.63849134510238,
            73.38849134510238,
            74.13849134510238,
            74.88849134510238,
            75.63849134510238,
            76.38849134510238,
            77.13849134510238,
            77.88849134510238,
            78.64798501598845,
            79.40747868687453,
            80.1669723577606,
            80.92646602864667,
            81.68595969953275,
            82.44545337041882,
            83.20494704130489,
            83.96444071219096,
            84.72393438307704,
            85.48342805396311,
            86.24292172484918,
            87.00241539573526,
            87.76190906662133,
            88.5214027375074,
            89.28089640839347,
            90.04039007927955,
            90.79039007927955,
            91.54039007927955,
            92.29039007927955,
            93.04039007927955,
            93.79039007927955,
            94.54039007927955,
            95.29039007927955,
            96.04039007927955,
            96.79039007927955,
            97.54039007927955,
            98.29039007927955,
            99.04039007927955,
            99.79039007927955,
            100.54039007927955,
            101.29039007927955,
            102.04039007927955,
            102.79988375016562,
            103.55937742105169,
            104.31887109193777,
            105.07836476282384,
            105.83785843370991,
            106.59735210459598,
            107.35684577548206,
            108.11633944636813,
            108.86633944636813,
            109.61633944636813,
            110.36633944636813,
            111.11633944636813,
            111.86633944636813,
            112.61633944636813,
            113.36633944636813,
            114.11633944636813,
            114.8855702155989,
            115.65480098482968,
            116.42403175406045,
            117.19326252329122,
            117.962493292522,
            118.73172406175277
        ]
    beat_algorithm.plotBeats(id, manual_beats=manual, aubio_beats=None, librosa_beats=librosaBeats, start=0, end=20)


# Calculate time since program started in seconds.
def getUptime():
    return ("%i seconds" % math.floor(time.time() - start_time))


# Diagnosis endpoint.
@app.route(dict.DIAGNOSIS_PATH)
def diagnosis():
    output = {
        "Version": dict.VERSION,
        "Uptime": getUptime()
    }
    return output


# Analysis endpoint.
@app.route(dict.ANALYSIS_PATH)
def analysis():
    # get youtube id
    id = flask.request.args.get('id', None)
    if id is None:
        error = {
            "Msg": "Requires a YouTube ID, example: '.../v1/analysis?id=dQw4w9WgXcQ'"
        }
        return error
    # preprocess audio file
    preprocessing.downloadAudio(id)
    preprocessing.resampleAudio(id)
    # analyze song
    bpm, beats = beat_algorithm.librosaBeatAnalysis(id)
    # return output
    output = {
        "bpm": bpm,
        "beats": beats
    }
    return output


# branch if program is run through 'python main.py'
if __name__ == "__main__":
    main()
